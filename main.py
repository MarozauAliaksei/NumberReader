import os
import torch
import random
from torch.utils.data import DataLoader, random_split
from train import ctc_beam_search_decode as ctc_decode
from dataset import *
from train import *
from model import *
from config import *
if __name__ == "__main__":
    train_dir = "data/train/images"
    val_dir = "data/val/images"

    # üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç
    train_ds = OCRDataset(train_dir, augment=True)
    val_ds = OCRDataset(val_dir, augment=True)


    train_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True, collate_fn=collate_fn)
    val_loader = DataLoader(val_ds, batch_size=BATCH_SIZE, collate_fn=collate_fn)

    # ‚öôÔ∏è –ú–æ–¥–µ–ª—å, –ª–æ—Å—Å, –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    model = CRNN(len(idx2char)).to(DEVICE)
    criterion = get_criterion()
    optimizer = get_optimizer(model, LR)

    # üéØ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    best_cer = float("inf")
    best_epoch = -1

    # üöÄ –û–±—É—á–µ–Ω–∏–µ
    for epoch in range(1, EPOCHS + 1):
        train_epoch(model, train_loader, criterion, optimizer, epoch)

        # üîç –í–∞–ª–∏–¥–∞—Ü–∏—è
        val_loss, val_cer = validate(model, val_loader, criterion, epoch)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
        if val_cer < best_cer:
            best_cer = val_cer
            best_epoch = epoch
            torch.save(model.state_dict(), "crnn_best.pth")
            print(f"üíæ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (Epoch {epoch}, CER={val_cer:.4f})")

        # üîπ –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–∑ train
        sample_idx = random.randint(0, len(train_ds) - 1)
        img_tensor, label_tensor, _ = train_ds[sample_idx]
        img_tensor = img_tensor.unsqueeze(0).to(DEVICE)

        model.eval()
        with torch.no_grad():
            preds = model(img_tensor)
            preds_log_probs = preds.log_softmax(2)
            decoded = ctc_decode(preds_log_probs)

        true_label = "".join([idx2char[i] for i in label_tensor.tolist()])
        print(f"\nüìå –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ —ç–ø–æ—Ö–∏ {epoch}:")
        print(f"   –ò—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {true_label}")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:   {decoded[0]}")
        print("-" * 50)
        model.train()

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    torch.save(model.state_dict(), "crnn_last.pth")
    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: epoch {best_epoch}, CER={best_cer:.4f}")
