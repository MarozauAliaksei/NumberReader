import os
import torch
import random
from torch.utils.data import DataLoader
from train import ctc_beam_search_decode as ctc_decode, train_epoch, validate, get_criterion, get_optimizer
from dataset import OCRDataset, collate_fn
from model import CRNN  # –∏–ª–∏ EfficientCRNN, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
from config import *
from Number_reader import DigitCNN  # –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è CNN

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
PRETRAIN_EPOCHS = 0  # —Å—Ä–∞–∑—É —Ñ–∏–Ω–µ—Ç—é–Ω –≤—Å–µ–π –º–æ–¥–µ–ª–∏
TOTAL_EPOCHS = EPOCHS

if __name__ == "__main__":
    train_dir = "data/train/images/augmented"
    val_dir = "data/val/images"

    # -------------------------
    # –î–∞—Ç–∞—Å–µ—Ç—ã
    # -------------------------
    train_ds = OCRDataset(train_dir, augment=True)
    val_ds = OCRDataset(val_dir, augment=True)

    train_loader = DataLoader(
        train_ds, 
        batch_size=BATCH_SIZE, 
        shuffle=True,       # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±–∞—Ç—á–∏
        collate_fn=collate_fn
    )
    val_loader = DataLoader(
        val_ds, 
        batch_size=BATCH_SIZE, 
        collate_fn=collate_fn
    )

    # -------------------------
    # –ú–æ–¥–µ–ª—å
    # -------------------------
    model = CRNN(in_channel=1, num_classes=11, cnn_input_height=32, use_gru=True)
    model.to(DEVICE)
    print(f"Params: {sum(p.numel() for p in model.parameters() if p.requires_grad)}")

    # -------------------------
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π CNN
    # -------------------------
    if os.path.exists("digit_pretrain.pth"):
        print("‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ DigitCNN...")
        digit_cnn = DigitCNN(num_classes=10).to(DEVICE)
        digit_cnn.load_state_dict(torch.load("digit_pretrain.pth", map_location=DEVICE))
        digit_cnn.eval()

        model_dict = model.state_dict()
        cnn_dict = digit_cnn.state_dict()

        for k in cnn_dict.keys():
            if k in model_dict:
                model_dict[k] = cnn_dict[k]

        model.load_state_dict(model_dict)
        print("‚úÖ –í–µ—Å–∞ CNN —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ CRNN")

    # -------------------------
    # –õ–æ—Å—Å, –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ scheduler
    # -------------------------
    criterion = get_criterion()
    optimizer = get_optimizer(model, LR)
    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(
        optimizer, mode='min', factor=0.5, patience=2, verbose=True
    )

    best_cer = float("inf")
    best_epoch = -1

    # -------------------------
    # –û–±—É—á–µ–Ω–∏–µ
    # -------------------------
    for epoch in range(1, TOTAL_EPOCHS + 1):
        # --- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        train_epoch(model, train_loader, criterion, optimizer, epoch)

        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è
        val_loss, val_cer = validate(model, val_loader, criterion, epoch)

        # --- Scheduler
        scheduler.step(val_loss)

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        if val_cer < best_cer:
            best_cer = val_cer
            best_epoch = epoch
            torch.save(model.state_dict(), "crnn_best.pth")
            print(f"üíæ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (Epoch {epoch}, CER={val_cer:.4f})")

        # --- –ü—Ä–∏–º–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        sample_idx = random.randint(0, len(train_ds) - 1)
        img_tensor, label_tensor, _ = train_ds[sample_idx]
        img_tensor = img_tensor.unsqueeze(0).to(DEVICE)

        model.eval()
        with torch.no_grad():
            preds = model(img_tensor)  # [B, W, C]
            decoded = ctc_decode(preds)

        true_label = "".join([idx2char[i] for i in label_tensor.tolist()])
        print(f"\nüìå –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ —ç–ø–æ—Ö–∏ {epoch}:")
        print(f"   –ò—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {true_label}")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:   {decoded[0]}")
        print("-" * 50)
        model.train()

    # -------------------------
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    # -------------------------
    torch.save(model.state_dict(), "crnn_last.pth")
    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: epoch {best_epoch}, CER={best_cer:.4f}")
